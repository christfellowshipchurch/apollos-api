directive @cacheControl(maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | OBJECT | INTERFACE

enum ACTION_FEATURE_ACTION {
  READ_CONTENT
  READ_EVENT
  OPEN_URL
  VIEW_CHILDREN
  READ_GLOBAL_CONTENT
}

type ActionListAction {
  id: ID!
  title: String
  subtitle: String
  image: ImageMedia
  relatedNode: Node
  action: ACTION_FEATURE_ACTION
}

type ActionListFeature implements Feature & Node {
  id: ID!
  order: Int
  title: String
  subtitle: String
  actions: [ActionListAction]
  primaryAction: FeatureAction
}

type Address implements Node {
  id: ID!
  street1: String!
  street2: String
  city: String!
  state: String!
  postalCode: String!
}

input AddressInput {
  street1: String!
  street2: String
  city: String!
  state: String!
  postalCode: String!
}

input AnalyticsDeviceInfo {
  platform: AnalyticsPlatform
  deviceId: String
  deviceModel: String
  osVersion: String
  appVersion: String
}

input AnalyticsIdentifyInput {
  traits: [AnalyticsMetaField]
  anonymousId: String!
  deviceInfo: AnalyticsDeviceInfo
}

input AnalyticsMetaField {
  field: String!
  value: AnalyticsValue
}

enum AnalyticsPlatform {
  iOS
  Android
}

type AnalyticsResult {
  success: Boolean
}

input AnalyticsTrackInput {
  eventName: String!
  properties: [AnalyticsMetaField]
  anonymousId: String
  deviceInfo: AnalyticsDeviceInfo
}

scalar AnalyticsValue

type AppLink {
  name: String!
  uri: String
  icon: String
  openInApp: Boolean
  theme: Theme
}

type AppLinks {
  name: String!
  links: [AppLink]
}

input Attribute {
  field: String!
  value: String!
}

type AudioMedia implements Media {
  name: String
  key: String
  sources: [AudioMediaSource]
}

type AudioMediaSource implements MediaSource {
  uri: String
}

type AuthenticatedUser {
  id: ID!
  profile: Person
  rock: RockPersonDetails
  rockToken: String @deprecated(reason: "Use rock.authCookie instead")
  streamChatToken: String
}

type Authentication {
  user: AuthenticatedUser
  token: String
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

type CallToAction {
  call: String
  action: String
}

type Campus implements Node {
  id: ID!
  name: String
  street1: String
  street2: String
  city: String
  state: String
  postalCode: String
  latitude: Float
  longitude: Float
  image: ImageMediaSource
  featuredImage: ImageMediaSource
  distanceFromLocation(location: CampusLocationInput): Float
  serviceTimes: [ServiceTime]
  campusFeatures: [CampusFeature]
  pastor: CampusPastor
  events: [Event]
}

type CampusContentFeature implements PageBuilderFeature & Node {
  id: ID!
  order: Int
  campus: Campus
  action: PageBuilderAction
}

type CampusFeature {
  title: String
  summary: String
  htmlContent: String
  options: [String]
  icon: String
}

input CampusLocationInput {
  latitude: Float
  longitude: Float
}

type CampusPastor {
  firstName: String
  lastName: String
  email: String
  photo: ImageMediaSource
}

type CardListItem {
  id: ID!
  hasAction: Boolean
  actionIcon: String
  labelText: String
  summary: String
  coverImage: ImageMedia
  title(hyphenated: Boolean): String
  relatedNode: Node
  action: ACTION_FEATURE_ACTION
}

type CheckInable implements Node {
  id: ID!
  title: String
  message: String
  isCheckedIn: Boolean
}

"""A rgb color string"""
scalar Color

type CommunicationPreferences {
  allowSMS: Boolean
  allowEmail: Boolean
  allowPushNotification: Boolean
}

enum CONTENT_BLOCK_DISPLAY {
  LEFT
  RIGHT
  TOP
  BOTTOM
  BACKGROUND_IMAGE
}

type ContentBlockFeature implements PageBuilderFeature & Node {
  id: ID!
  order: Int
  content: ContentBlockItem
  display: CONTENT_BLOCK_DISPLAY
}

type ContentBlockItem {
  title: String
  subtitle: String
  htmlContent: String
  image: ImageMedia
  callsToAction: [CallToAction]
}

type ContentChannel implements Node {
  id: ID!
  name: String
  description: String
  childContentChannels: [ContentChannel]
  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
  iconName: String
}

type ContentGridFeature implements PageBuilderFeature & Node {
  id: ID!
  order: Int
  title: String
  subtitle: String
  blocks: [ContentBlockItem]
  primaryAction: PageBuilderAction
}

interface ContentItem {
  id: ID!
  title(hyphenated: Boolean): String
  coverImage: ImageMedia
  images: [ImageMedia]
  videos: [VideoMedia]
  audios: [AudioMedia]
  htmlContent: String
  summary: String
  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
  parentChannel: ContentChannel
  theme: Theme
  isLiked: Boolean
  likedCount: Int
  sharing: SharableContentItem
}

type ContentItemsConnection {
  edges: [ContentItemsConnectionEdge]
  totalCount: Int
  pageInfo: PaginationInfo
}

type ContentItemsConnectionEdge {
  node: ContentItem
  cursor: String
}

input ContentItemsConnectionInput {
  first: Int
  after: String
}

type ContentSeriesContentItem implements ContentItem & Node {
  id: ID!
  title(hyphenated: Boolean): String
  coverImage: ImageMedia
  images: [ImageMedia]
  videos: [VideoMedia]
  audios: [AudioMedia]
  htmlContent: String
  summary: String
  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
  parentChannel: ContentChannel
  theme: Theme
  percentComplete: Float
  upNext: ContentItem
  scriptures: [Scripture]
  tags: [String]
  icon: String
  estimatedTime: String
  publishDate: String
  author: Person
  features: [Feature]
  isLiked: Boolean
  likedCount: Int
  sharing: SharableContentItem
}

type DateTime {
  start: String
  end: String
}

type DefinedValue implements Node {
  id: ID!
  value: String
}

type DefinedValueList implements Node {
  id: ID!
  values: [DefinedValue]
}

type DevotionalContentItem implements ContentItem & Node {
  id: ID!
  title(hyphenated: Boolean): String
  coverImage: ImageMedia
  images: [ImageMedia]
  videos: [VideoMedia]
  audios: [AudioMedia]
  htmlContent: String
  summary: String
  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
  parentChannel: ContentChannel
  theme: Theme
  scriptures: [Scripture]
  tags: [String]
  icon: String
  estimatedTime: String
  publishDate: String
  author: Person
  isLiked: Boolean
  likedCount: Int
  sharing: SharableContentItem
}

type Event implements Node {
  id: ID!
  name: String
  description: String
  location: String
  start: String
  end: String
  image: ImageMedia
  campuses: [Campus]
}

type EventContentItem implements ContentItem & Node {
  id: ID!
  title(hyphenated: Boolean): String
  coverImage: ImageMedia
  images: [ImageMedia]
  videos: [VideoMedia]
  audios: [AudioMedia]
  htmlContent: String
  summary: String
  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
  parentChannel: ContentChannel
  theme: Theme
  nextOccurrence: String
  startDate: String
  endDate: String
  tags: [String]
  callsToAction: [CallToAction]
  openLinksInNewTab: Boolean
  hideLabel: Boolean
  events: [Event]
  checkin: CheckInable
  isLiked: Boolean
  likedCount: Int
  sharing: SharableContentItem
}

interface Feature {
  id: ID!
  order: Int
}

type FeatureAction {
  relatedNode: Node
  action: ACTION_FEATURE_ACTION
  title: String
}

enum FLAG_STATUS {
  LIVE
  DISABLED
}

type FloatLeftLiveStream {
  start: String
  isLive: Boolean
  coverImage: ImageMedia
  media: VideoMedia
  title: String
}

enum GENDER {
  Male
  Female
  Unknown
}

type Group implements Node {
  id: ID!
  allowMessages: String
  avatars: [String]
  coverImage: ImageMedia
  dateTime: DateTime
  groupResources: [Resource]
  groupType: String
  leaders: [Person]
  members: [Person]
  parentVideoCall: VideoCallParams
  phoneNumbers: [String]
  schedule: Schedule
  summary: String
  title: String
  videoCall: VideoCallParams
}

enum GROUP_TYPE {
  Adult
  CFE
  Freedom
  GetStronger
  HubMarriage
  HubStudies
  MarriageStudies
  Students
  Studies
  TableGetStronger
  TableStudies
  YoungAdults
}

type HeroListFeature implements Feature & Node {
  id: ID!
  order: Int
  title: String
  subtitle: String
  actions: [ActionListAction]
  heroCard: CardListItem
  primaryAction: FeatureAction
}

type HorizontalCardListFeature implements Feature & Node {
  id: ID!
  order: Int
  title: String
  subtitle: String
  cards: [CardListItem]
}

type ImageMedia implements Media {
  name: String
  key: String
  sources: [ImageMediaSource]
}

type ImageMediaSource implements MediaSource {
  uri: String
}

enum INDEX_ACTION {
  update
  delete
}

type InformationalContentItem implements ContentItem & Node {
  id: ID!
  title(hyphenated: Boolean): String
  coverImage: ImageMedia
  images: [ImageMedia]
  videos: [VideoMedia]
  audios: [AudioMedia]
  htmlContent: String
  summary: String
  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
  parentChannel: ContentChannel
  theme: Theme
  tags: [String]
  redirectUrl: String
  callsToAction: [CallToAction]
  isLiked: Boolean
  likedCount: Int
  sharing: SharableContentItem
}

enum InteractionAction {
  VIEW
  COMPLETE
  PRAY
}

input InteractionDataField {
  field: String!
  value: InteractionValue
}

type InteractionResult {
  success: Boolean
  node: Node
}

scalar InteractionValue

enum LIKE_OPERATION {
  Like
  Unlike
}

input LikeEntityInput {
  nodeId: ID!
  operation: LIKE_OPERATION!
}

type LiveStream {
  isLive: Boolean
  eventStartTime: String
  media: VideoMedia
  webViewUrl: String
  contentItem: ContentItem
}

type LiveStreamListFeature implements Feature & Node {
  id: ID!
  order: Int
  title: String
  subtitle: String
  liveStreams: [LiveStream]
}

interface Media {
  name: String
  key: String
  sources: [MediaSource]
}

type MediaContentItem implements ContentItem & Node {
  id: ID!
  title(hyphenated: Boolean): String
  coverImage: ImageMedia
  images: [ImageMedia]
  videos: [VideoMedia]
  audios: [AudioMedia]
  htmlContent: String
  summary: String
  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
  parentChannel: ContentChannel
  theme: Theme
  scriptures: [Scripture]
  tags: [String]
  icon: String
  estimatedTime: String
  publishDate: String
  author: Person
  isLiked: Boolean
  likedCount: Int
  sharing: SharableContentItem
}

enum MediaInputType {
  IMAGE
  VIDEO
  AUDIO
}

interface MediaSource {
  uri: String
}

type Message implements Node {
  id: ID!
  title(hyphenated: Boolean): String
  subtitle(hyphenated: Boolean): String
  body(hyphenated: Boolean): String
  date: String
}

type MessagesConnection {
  edges: [MessagesConnectionEdge]
  totalCount: Int
  pageInfo: PaginationInfo
}

type MessagesConnectionEdge {
  node: Message
  cursor: String
}

input MessagesConnectionInput {
  first: Int
  after: String
}

type Metadata {
  name: String
  content: String
}

type MetadataFeature implements PageBuilderFeature & Node {
  id: ID!
  order: Int
  title: String
  meta: [Metadata]
}

type MetaTag {
  name: String
  content: String
}

type Mutation {
  _placeholder: Boolean
  identifySelf(input: AnalyticsIdentifyInput!): AnalyticsResult
  trackEvent(input: AnalyticsTrackInput!): AnalyticsResult
  authenticate(identity: String!, password: String!): Authentication
  changePassword(password: String!): Authentication
  registerPerson(email: String!, password: String!, userProfile: [UpdateProfileInput]): Authentication
  requestEmailLoginPin(email: String!): Boolean
  changePasswordWithPin(email: String!, pin: String!, newPassword: String!): Authentication
  requestSmsLoginPin(phoneNumber: String!): SmsPinResult
  authenticateWithSms(phoneNumber: String!, pin: String!): Authentication
  registerWithSms(phoneNumber: String!, pin: String!, userProfile: [UpdateProfileInput]): Authentication
  updateUserCampus(campusId: String!): Person
  checkInCurrentUser(id: ID!): CheckInable
  updateLikeEntity(input: LikeEntityInput!): ContentItem
  addMemberAttendance(id: ID!): Group
  interactWithNode(action: InteractionAction!, nodeId: ID!, data: [InteractionDataField]): InteractionResult
  updateUserPushSettings(input: PushSettingsInput!): Person
  updateProfileField(input: UpdateProfileInput!): Person
  updateProfileFields(input: [UpdateProfileInput]!): Person
  uploadProfileImage(file: Upload!, size: Int!): Person
  updateAddress(address: AddressInput!): Address
  updateCommunicationPreference(type: UPDATEABLE_COMMUNICATION_PREFERENCES!, allow: Boolean!): Person
  updateCommunicationPreferences(input: [UpdateCommunicationPreferenceInput]!): Person
  submitRsvp(input: [Attribute]!): String
  submitEmailCapture(input: [Attribute]!): String
  addPrayer(text: String!, isAnonymous: Boolean): PrayerRequest
  indexContentItem(id: String, action: INDEX_ACTION, key: String): String
  updateUserPushSettingsTN(input: TwilioNotifyPushInput!): Person
  sendPushNotification(input: PushMessageInput): Boolean
}

interface Node {
  id: ID!
}

enum PAGE_BUILDER_FEATURE_ACTION {
  VIEW_MORE
}

type PageBuilderAction {
  title: String
  action: PAGE_BUILDER_FEATURE_ACTION
}

interface PageBuilderFeature {
  id: ID!
  order: Int
}

type PaginationInfo {
  startCursor: String
  endCursor: String
}

type Pass implements Node {
  id: ID!
  type: PassType
  description: String
  logo: ImageMediaSource
  thumbnail: ImageMediaSource
  barcode: ImageMediaSource
  primaryFields: [PassField]
  secondaryFields: [PassField]
  backgroundColor: Color
  foregroundColor: Color
  labelColor: Color
  logoText: String
  passkitFileUrl: String
}

type PassField {
  key: String!
  label: String
  value: String!
  textAlignment: PassFieldTextAlignment
}

enum PassFieldTextAlignment {
  LEFT
  CENTER
  RIGHT
  NATURAL
}

enum PassType {
  GENERIC
}

type Person implements Node {
  id: ID!
  firstName: String
  lastName: String!
  nickName: String
  email: String
  phoneNumber: String
  gender: GENDER
  birthDate: String
  photo: ImageMediaSource
  ethnicity: String
  address: Address
  baptismDate: String
  salvationDate: String
  communicationPreferences: CommunicationPreferences
  campus: Campus
  groups(type: GROUP_TYPE, asLeader: Boolean): [Group]
  isGroupLeader: Boolean
}

type PrayerListFeature implements Feature & Node {
  id: ID!
  order: Int
  isCard: Boolean
  title: String
  subtitle: String
  prayers: [PrayerRequest]
}

type PrayerRequest implements Node {
  id: ID!
  text: String!
  requestor: Person
  isAnonymous: Boolean
  isPrayed: Boolean
  requestedDate: String
}

type PrayerRequestsConnection {
  edges: [PrayerRequestsConnectionEdge]
  totalCount: Int
  pageInfo: PaginationInfo
}

type PrayerRequestsConnectionEdge {
  node: PrayerRequest
  cursor: String
}

input PrayerRequestsConnectionInput {
  first: Int
  after: String
}

input PushMessageInput {
  title: String
  body: String
  identity: String
}

input PushSettingsInput {
  enabled: Boolean
  pushProviderUserId: String
}

type Query {
  _placeholder: Boolean
  node(id: ID!): Node
  privacyPolicyUrl: String
  passwordResetUrl: String
  moreLinks: [AppLinks]
  profileLinks: [AppLink]
  websiteBanner: CallToAction
  genderOptions: [String]
  inAppLink(url: String!): String
  getAddressByPerson: Address
  getStatesList: DefinedValueList @deprecated(reason: "Use 'statesList' instead.")
  stateOptions: [String]
  currentUser: AuthenticatedUser
  canAccessExperimentalFeatures: Boolean
  userExists(identity: String): USER_AUTH_STATUS
  getBrowseFilters: [ContentChannel] @deprecated(reason: "Use browseFilters instead")
  browseFilters: [ContentItem]
  campuses(location: CampusLocationInput): [Campus]
  campus(name: String!): Campus
  campusFAQ(name: String): [ContentItem]
  campusContentItems(name: String!): [ContentItem]
  contentChannels: [ContentChannel]
  campaigns: ContentItemsConnection
  userFeed(first: Int, after: String): ContentItemsConnection
  personaFeed(first: Int, after: String): ContentItemsConnection
  getEventContentByTitle(title: String!): EventContentItem
  getWebsitePageContentByTitle(website: String!, title: String!): WebsitePagesContentItem
  getContentItemByTitle(title: String!): ContentItem
  getCategoryByTitle(title: String!): ContentItem
  allEvents: [EventContentItem]
  featuredEvents: ContentItemsConnection
  sermons(first: Int, after: String): ContentItemsConnection
  getDefinedValueByIdentifier(identifier: String): DefinedValue
  getDefinedValueListByIdentifier(identifier: String): DefinedValueList
  userFeedFeatures: [Feature]
  userHeaderFeatures: [Feature]
  flagStatus(key: String!): FLAG_STATUS
  likedContent(first: Int, after: String): ContentItemsConnection
  liveStream: LiveStream @deprecated(reason: "Use liveStreams, there may be multiple.")
  liveStreams: [LiveStream]
  floatLeftLiveStream: LiveStream
  floatLeftEmptyLiveStream: LiveStream
  notificationCenter(first: Int, after: String): MessagesConnection
  metadata(relatedNode: ID!): [Metadata]
  pageBuilderFeatures(url: String!): [PageBuilderFeature]
  userPass: Pass
  getEthnicityList: DefinedValueList
  getSpouse: Person
  getChildren: [Person]
  currentUserPrayerRequests(first: Int, after: String): PrayerRequestsConnection
  scripture(query: String!, version: VERSION): Scripture @deprecated(reason: "Use 'scriptures' instead.")
  scriptures(query: String!, version: VERSION): [Scripture]
  search(query: String!, first: Int, after: String): SearchResultsConnection
  getWebsiteNavigation(website: String!): WebsiteNavigation
}

type Resource {
  title: String
  url: String
  contentChannelItem: String
}

type RockPersonDetails {
  authToken: String
  authCookie: String
}

type Schedule {
  id: ID!
  name: String
  description: String
  friendlyScheduleText: String
  weeklyTimeOfDay: String
  weeklyDayOfWeek: Int
  iCalendarContent: String
  isActive: Boolean
}

type Scripture implements Node {
  id: ID!
  html: String
  reference: String
  copyright: String
  version: String
}

type ScriptureFeature implements Feature & Node {
  id: ID!
  order: Int
  scriptures: [Scripture]
  sharing: SharableFeature
}

type SearchResult {
  cursor: String
  title: String
  summary: String
  coverImage: ImageMedia
  node: Node
}

type SearchResultsConnection {
  edges: [SearchResult]
  pageInfo: PaginationInfo
}

type ServiceTime {
  day: String
  time: String
}

interface Sharable {
  message: String
  title: String
  url: String @deprecated(reason: "Not supported on the interface")
}

type SharableContentItem implements Sharable {
  message: String
  title: String
  url: String
}

type SharableFeature implements Sharable {
  message: String
  title: String
  url: String @deprecated(reason: "Not supported on a feature")
}

type SmsPinResult {
  success: Boolean
  userAuthStatus: USER_AUTH_STATUS
}

type TextFeature implements Feature & Node {
  id: ID!
  order: Int
  body: String
  sharing: SharableFeature
}

type Theme {
  type: ThemeType
  colors: ThemeColors
}

type ThemeColors {
  primary: Color
  secondary: Color
  screen: Color
  paper: Color
  alert: Color
}

enum ThemeType {
  LIGHT
  DARK
}

input TwilioNotifyPushInput {
  enabled: Boolean
  bindingType: String
  address: String
}

type UniversalContentItem implements ContentItem & Node {
  id: ID!
  title(hyphenated: Boolean): String
  coverImage: ImageMedia
  images: [ImageMedia]
  videos: [VideoMedia]
  audios: [AudioMedia]
  htmlContent: String
  summary: String
  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
  parentChannel: ContentChannel
  theme: Theme
  tags: [String]
  icon: String
  estimatedTime: String
  publishDate: String
  author: Person
  isLiked: Boolean
  likedCount: Int
  sharing: SharableContentItem
}

enum UPDATEABLE_COMMUNICATION_PREFERENCES {
  SMS
  Email
}

enum UPDATEABLE_PROFILE_FIELDS {
  FirstName
  LastName
  Email
  NickName
  Gender
  BirthDate
  Ethnicity
  BaptismDate
  SalvationDate
  PhoneNumber
}

input UpdateCommunicationPreferenceInput {
  type: UPDATEABLE_COMMUNICATION_PREFERENCES!
  allow: Boolean!
}

input UpdateProfileInput {
  field: UPDATEABLE_PROFILE_FIELDS!
  value: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type Url implements Node {
  url: String
  id: ID!
}

enum USER_AUTH_STATUS {
  NONE
  NEW_APP_USER
  EXISTING_APP_USER
}

enum VERSION {
  WEB
  KJV
}

type VerticalCardListFeature implements Feature & Node {
  id: ID!
  order: Int
  title: String
  subtitle: String
  isFeatured: Boolean
  cards: [CardListItem]
}

type VideoCallParams {
  link: String
  meetingId: String
  passcode: String
}

type VideoMedia implements Media {
  name: String
  key: String
  sources: [VideoMediaSource]
  embedHtml: String
}

type VideoMediaSource implements MediaSource {
  uri: String
}

type WebsiteBlockItem implements ContentItem & Node {
  id: ID!
  title(hyphenated: Boolean): String
  coverImage: ImageMedia
  images: [ImageMedia]
  videos: [VideoMedia]
  audios: [AudioMedia]
  htmlContent: String
  summary: String
  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
  parentChannel: ContentChannel
  theme: Theme
  contentLayout: String
  imageAlt: String
  imageRatio: String
  callToAction: CallToAction
  secondaryCallToAction: CallToAction
  subtitle: String
  openLinksInNewTab: Boolean
  isLiked: Boolean
  likedCount: Int
  sharing: SharableContentItem
}

type WebsiteFeature implements ContentItem & Node {
  id: ID!
  title(hyphenated: Boolean): String
  coverImage: ImageMedia
  images: [ImageMedia]
  videos: [VideoMedia]
  audios: [AudioMedia]
  htmlContent: String
  summary: String
  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
  parentChannel: ContentChannel
  theme: Theme
  feature: String
  subtitle: String
  isLiked: Boolean
  likedCount: Int
  sharing: SharableContentItem
}

type WebsiteGroupItem implements ContentItem & Node {
  id: ID!
  title(hyphenated: Boolean): String
  coverImage: ImageMedia
  images: [ImageMedia]
  videos: [VideoMedia]
  audios: [AudioMedia]
  htmlContent: String
  summary: String
  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
  parentChannel: ContentChannel
  theme: Theme
  groupLayout: String
  accordionType: String
  backgroundColor: String
  isLiked: Boolean
  likedCount: Int
  sharing: SharableContentItem
}

type WebsiteHtmlBlockItem implements ContentItem & Node {
  id: ID!
  title(hyphenated: Boolean): String
  coverImage: ImageMedia
  images: [ImageMedia]
  videos: [VideoMedia]
  audios: [AudioMedia]
  htmlContent: String
  summary: String
  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
  parentChannel: ContentChannel
  theme: Theme
  feature: String
  subtitle: String
  isLiked: Boolean
  likedCount: Int
  sharing: SharableContentItem
}

type WebsiteNavigation implements Node {
  id: ID!
  navigationLinks: [CallToAction]
  quickAction: CallToAction
  images: [ImageMedia]
  footerLinks: [CallToAction]
  socialMediaLinks: [CallToAction]
}

type WebsitePagesContentItem implements ContentItem & Node {
  id: ID!
  title(hyphenated: Boolean): String
  coverImage: ImageMedia
  images: [ImageMedia]
  videos: [VideoMedia]
  audios: [AudioMedia]
  htmlContent: String
  summary: String
  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
  parentChannel: ContentChannel
  theme: Theme
  metaDescription: String
  metaKeywords: [String]
  openGraphProtocols: [MetaTag]
  twitterProtocols: [MetaTag]
  icon: String
  isLiked: Boolean
  likedCount: Int
  sharing: SharableContentItem
}

type WebviewFeature implements Feature & Node {
  id: ID!
  order: Int
  linkText: String
  title: String
  url: String
}

type WeekendContentItem implements ContentItem & Node {
  id: ID!
  title(hyphenated: Boolean): String
  coverImage: ImageMedia
  images: [ImageMedia]
  videos: [VideoMedia]
  audios: [AudioMedia]
  htmlContent: String
  summary: String
  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
  parentChannel: ContentChannel
  theme: Theme
  tags: [String]
  icon: String
  estimatedTime: String
  publishDate: String
  author: Person
  features: [Feature]
  isLiked: Boolean
  likedCount: Int
  liveStream: LiveStream
  sharing: SharableContentItem
}

